version: 2.1
orbs:
  node: circleci/node@1.1.6


references:

  restore_npm_cache_frontend: &restore_npm_cache_frontend
    restore_cache:
      name: Restore npm cache
      key: dependency-npm-{{ .Branch }}-{{ checksum "./frontend/package.json" }}

  restore_npm_cache_backend: &restore_npm_cache_backend
    restore_cache:
      name: Restore npm cache
      key: dependency-npm-{{ .Branch }}-{{ checksum "./backend/package.json" }}

  restore_repo: &restore_repo_cache
    restore_cache:
      name: Restore code cache
      key: repo-{{ .Branch }}-{{ .Revision }}

jobs:
  build-client:
    executor:
      name: node/default
    steps:
      - checkout
      - *restore_npm_cache_frontend
      - run: cd frontend && npm install
      - save_cache:
          name: Save npm cache
          key: dependency-npm-{{ .Branch }}-{{ checksum "./frontend/package.json" }}
          paths:
            - './frontend/node_modules'
      - save_cache:
          name: Save repo cache
          key: repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
  build-and-test-server:
    executor:
      name: node/default
    steps:
      - checkout
      - *restore_npm_cache_backend
      - run: sudo apt-get install postgresql
      - run: sudo apt-get install -y git-crypt
      - run: echo "$GIT_CRYPT_KEY" > key.key
      - run: base64 -di key.key > git-crypt.key
      - run: git-crypt unlock git-crypt.key
      - run: cd backend && npm install
      - save_cache:
          name: Save npm cache
          key: dependency-npm-{{ .Branch }}-{{ checksum "./backend/package.json" }}
          paths:
            - './backend/node_modules'
      - save_cache:
          name: Save repo cache
          key: repo-{{ .Branch }}-{{ .Revision }}
          paths:
            - .
  deploy-server:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "local-library-kpi"
      - GOOGLE_PROJECT_ID: "locallibrary-kpi"
      - GOOGLE_COMPUTE_REGION: "europe-west3"
      - GOOGLE_CLUSTER_NAME: "cloudl"
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Deploy to Docker Cloud server
          command: |
            cd backend
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker build -t $DOCKER_LOGIN/local-library-server:$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM .
            docker push $DOCKER_LOGIN/local-library-server:$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM
      - run:
          name: Setup Google Cloud SDK
          command: |
            apt-get install -qq -y gettext
            echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
            gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/region ${GOOGLE_COMPUTE_REGION}
            gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME} --region=$GOOGLE_COMPUTE_REGION
      - run:
          name: Deploy to Kubernetes
          command: |
            envsubst < ${HOME}/project/backend/k8s.yml > ${HOME}/project/backend/patched_k8s.yml
            kubectl apply -f ${HOME}/project/backend/patched_k8s.yml
            kubectl rollout status deployment/${PROJECT_NAME}
  deploy-client:
    executor:
      name: node/default
    steps:
      - *restore_repo_cache
      - setup_remote_docker
      - run:
          name: Deploy to Docker Cloud server
          command: |
            cd frontend
            docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
            docker build -t $DOCKER_LOGIN/local-library-client:$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM .
            docker push $DOCKER_LOGIN/local-library-client:$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
      - run:
          name: Deliver to Kubernetes
          command: |
            cd frontend
            echo "${KUBE_CA_PEM}" > cerf.txt
            kubectl config set-cluster local-library --certificate-authority="$KUBE_CA_PEM" --server=$KUBE_URL
            kubectl config set-credentials admin --username="${KUBE_USERNAME}" --password="${KUBE_PASSWORD}"
            kubectl config set-context default --cluster="local-library" --user=${KUBE_USERNAME}
            kubectl config use-context default
            kubectl get pods
            kubectl set image deployment/default "local-library"=$DOCKER_LOGIN/local-library-client:$CIRCLE_BRANCH-$CIRCLE_BUILD_NUM
workflows:
  # client:
  #   jobs:
  #     - build-client:
  #         filters:
  #           branches:
  #             only:
  #               - deploy
  #     - deploy-client:
  #         requires:
  #           - build-client
  server:
    jobs:
      - build-and-test-server:
          filters:
            branches:
              only:
                - deploy
      - deploy-server:
          requires:
            - build-and-test-server
